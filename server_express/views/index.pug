doctype html
html
  head
    title #{title}
    link(rel='stylesheet', href="/css/mystyles.css")
    script(src="node_modules/jquery/dist/jquery.js", type="text/javscript")

  body
    p.hiddendata isdataloaded?#{isdataloaded}
    p.hiddendata mainScoreData_index?#{mainScoreData_index}
    p.hiddendata mainScoreData_main?#{mainScoreData_main}
    div
      - 
        mainScoreData_index = JSON.parse(mainScoreData_index)
        mainScoreData_index = Object.entries(mainScoreData_index)
        mainScoreData_main_old =  JSON.parse(mainScoreData_main) 
        mainScoreData_main = []

        for (key in mainScoreData_main_old) {var value = mainScoreData_main_old[key]; mainScoreData_main.push([key,Object.entries(value)])}
      // index case
      div.columns 
        each val in mainScoreData_index
          div.column
            p.index(id="#{val[0]}") #{val[1]} 
      
      // mainData case
      div.columns
        each arr in mainScoreData_main
          div.column
            p.main_outter #{arr[0]}
              each val in arr[1]
                p.main_inner(id="#{arr[0]}") #{val[0]}:#{val[1]}

    div.columns
      div.column.is-two-thirds
        form(action='/api/SETTINGsSet/', method="post")
          input(type="hidden", name="portal2", value=iam)
          div.columns
            div.column
              input.slider.has-output.is-fullwidth(id="sliderWithValue" name="slider1" step="1" min="0" max="14" value=showday_amount type="range" )
              output(for="sliderWithValue" ) #{showday_amount}
            div.column
              input(class="button", type="submit", value="submit" )

      div.column
        form(action="/api/notionUpdate", method="post") 
          input(type="hidden",name="portal1", value=iam )
          input.refreshData(class="button", type="submit", value="refresh Data" )

      div.column
        a(class="button" href="/home/rate_adjust") Set density of prop


    script.
      function getElementsByClassName_repeat(className, repeatFunc)
      {
        var gets = document.getElementsByClassName(className)
        var bodySet = {}
        document.write("hello, world!")
        for (var i=0; i < gets.length; i++)
        {
          var target = gets[i]
          repeatFunc(target)
        }
        return bodySet
      }
      var hidden_values = {}
      function hider(target)
      {
        target.hidden = true
        var targetquerry = (target.outerText).split("?")
        hidden_values[targetquerry[0]] = {"value":targetquerry[1],"tagBody":target}
      }
      getElementsByClassName_repeat('hiddendata', hider)
      //main score part
      ////inner main score grabging code
      const moment = require('moment')
      
      var main_organized = {}
      function main_inner_organizer(target)
      {
        var date_string = target.id
        var value_string = target.innerText.split(":")

        var propname = value_string[0]
        var point = Number(value_string[1])

        var tag_object = {"propname":propname, "point":point, "tagBody":target, "tagWhere":"inner"}
        if main_organized.hasOwnPropperty(date_string) == true
        {
          main_organized[date_string].push(tag_object)
        }
        else
        {
          main_organized[date_string] = [tag_object]
        }
      }
      getElementsByClassName_repeat("main_inner", main_inner_organizer)
      /*

      main_organized.sort((a,b) => {
        var a_date = moment(a, "YYYY-MM-DD")
        var b_date = moment(b,"YYYY-MM-DD")
        if a_date < b_date {return -1}
        else if a_date > b_date {return 1}
        else {return 0}
      })



      ////outer main score grabbing code
      function main_outter_organizer(target)
      {
        var date_string = target.innerText
        var tag_object = {"tagBody":target, "tagWhere":"outter"}
        main_organized[date_string].push(tag_object)
      }
      getElementsByClassName_repeat("main_outter", main_outter_organizer)

      //index grabbing code
      var index_organized = {}
      function index_organizer(target)
      {
        var propname = target.id
        var color = target.innerText
        index_organized[propname] = {"color" : color, "tagBody" : target}
      }

      document.write(main_organized)
      document.write(index_organized)

      */
      //slider DB loading succed or fail showing
      var isdataloaded = hidden_values["isdataloaded"]["value"]
      var inputTarget = document.getElementsByClassName('refreshData')[0]

      if (isdataloaded === "-1")
      {
        inputTarget.setAttribute("value", "request Blocked!")
      }


      //sliders value showing code
      var sliders = document.querySelectorAll('input[type="range"].slider')
      sliders.forEach((slider) => {

        var id = slider.id 

        var outputsSet = document.getElementsByTagName('output')
        for (var i=0; i < outputsSet.length; i++) 
        {
          var output = outputsSet[i]
          if (output.htmlFor == id)
          {
            // connect the output and slider.
            slider.addEventListener('input', (event) => {
              output.value = event.target.value
            })
          }
        }
      }) 

